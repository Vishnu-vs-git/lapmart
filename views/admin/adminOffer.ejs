<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Category-based Offers</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.0.0/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body class="bg-black">
  <div class="flex text-white ">
    <!-- Admin Sidebar -->
    <%- include('../partials/adminSidebar') %>

    <!-- Main Content -->
    <div class="flex-1 bg-black">
      <!-- Top Bar with Admin Icon -->
      <header class="flex justify-end  shadow p-4 ">
        <%- include('../partials/adminLoginIcon') %>
      </header>

      <section class="p-8">
        <h1 class="text-2xl font-bold mb-6">Category-based Offers</h1>
        
        <!-- Form to add a new offer -->
        <form action="/admin/addOffer" method="POST" class="bg-gray-800 shadow rounded-lg p-6 mb-8">
          <div class="grid grid-cols-1 gap-6 md:grid-cols-3 ">
            <div class="">
              <label for="category" class="block text-sm font-medium text-white">Category:</label>
              <select name="category" id="category" required class="mt-1 block w-full text-black rounded-md border-gray-300 shadow-sm">
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>"><%= category.name %></option>
                <% }); %>
              </select>
            </div>

            <div class="">
              <label for="offerName" class="block text-sm font-medium text-white">Offer Name:</label>
              <input type="text" name="offerName" id="offerName" required class="mt-1 block w-full text-black rounded-md border-gray-300 shadow-sm">
            </div>

            <div class="">
              <label for="discount" class="block text-sm font-medium text-white">Discount (%):</label>
              <input type="number" name="discount" id="discount" min="1" max="100" required class="mt-1 block w-full text-black rounded-md border-gray-300 shadow-sm">
            </div>
          </div>
          <button type="submit" class="mt-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">Add Offer</button>
        </form>

        <!-- Table displaying existing offers -->
        <div class="bg-gray-800 shadow rounded-lg overflow-hidden">
          <table class="min-w-full leading-normal">
            <thead>
              <tr class="bg-black border border-white font-bold">
                <th class="px-5 py-3  text-left text-xs   uppercase tracking-wider">Category</th>
                <th class="px-5 py-3  text-left text-xs   uppercase tracking-wider">Offer Name</th>
                <th class="px-5 py-3  text-left text-xs  uppercase tracking-wider">Discount</th>
                <th class="px-5 py-3  text-left text-xs  uppercase tracking-wider">Status</th>
                <th class="px-5 py-3  text-left text-xs  uppercase tracking-wider">Action</th>
              </tr>
            </thead>
            <tbody>
              <% offers.forEach(offer => { %>
                <tr class="bg-gray-800 border-b text-white">
                  <td class="px-5 py-5 text-md "><%= offer.category.name %></td>
                  <td class="px-5 py-5 text-md "><%= offer.offerName %></td>
                  <td class="px-5 py-5 text-md "><%= offer.discount %></td>
                  <td id="status-<%= offer._id %>" class="px-5 py-5 text-md ">
                    <%= offer.isActive ? 'Active' : 'Inactive' %>
                  </td>
                  <td class="px-5 py-5 text-sm text-gray-900">
                    <!-- Aligning buttons using flexbox -->
                    <div class="flex space-x-2">
                      <button onclick="toggleOfferStatus('<%= offer._id %>', '<%= offer.isActive %>')" 
                              id="btn-<%= offer._id %>" 
                              class="bg-gray-500 text-white py-1 px-3 rounded hover:bg-gray-600">
                        <%= offer.isActive ? 'Block' : 'Unblock' %>
                      </button>
                      <button onclick="changeData('<%= offer._id %>')" 
                              class="bg-red-700 text-white py-1 px-3 rounded hover:bg-red-500">
                        Edit
                      </button>
                      <button onclick="RemoveOffer('<%= offer._id %>')" 
                              class="bg-black text-white py-1 px-3 rounded hover:bg-gray-700">
                        Remove
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
            
          </table>
          
                    <!-- Pagination -->
 <div class="flex justify-center mt-4 space-x-2">
  <% if (currentPage > 1) { %>
    <a href="/admin/offers?page=<%= currentPage - 1 %>" class="bg-gray-300 text-black px-4 py-2 rounded hover:bg-gray-400">Previous</a>
  <% } %>
  <% for (let i = 1; i <= totalPages; i++) { %>
    <a href="/admin/offers?page=<%= i %>" class="px-4 py-2 rounded <%= i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black hover:bg-gray-400' %>"><%= i %></a>
  <% } %>
  <% if (currentPage < totalPages) { %>
    <a href="/admin/offers?page=<%= currentPage + 1 %>" class="bg-gray-300 text-black px-4 py-2 rounded hover:bg-gray-400">Next</a>
  <% } %>

         
      </div>
        </div>
      </section>
    </div>
  </div>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    const message = "<%= message %>";
    if (message) {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: message,
        timer: 2000,
        showConfirmButton: false,
      });
    }
  </script>
  <script>
   
  async function toggleOfferStatus(offerId, changeStatus) {
  try {
    console.log(`Toggling offer status for ID: ${offerId}, Current Status: ${changeStatus}`);

    // Make API call
    const response = await axios.patch(`/admin/changeOfferstatus/${offerId}`, { changeStatus });

    console.log('API Response:', response.data);

    if (response.data.success) {
      // Locate DOM elements
      const statusElem = document.getElementById(`status-${offerId}`);
      const buttonElem = document.getElementById(`btn-${offerId}`);

      console.log('Before Update - Status:', statusElem?.innerText, 'Button:', buttonElem?.innerText);

      // Update status and button text
      if (response.data.isActive) {
        statusElem.innerText = 'Active';
        buttonElem.innerText = 'Block';

        // Success alert
        Swal.fire({
          icon: 'success',
          title: 'Status Updated',
          text: 'Offer has been activated successfully!',
          timer: 2000,
          showConfirmButton: false,
        }).then(()=>{
          window.location.reload()
        })
      } else {
        statusElem.innerText = 'Inactive';
        buttonElem.innerText = 'Unblock';

        // Success alert
        Swal.fire({
          icon: 'success',
          title: 'Status Updated',
          text: 'Offer has been deactivated successfully!',
          timer: 2000,
          showConfirmButton: false,
        }).then(()=>{
          window.location.reload();
        })
      }
    } else {
      // Failure alert
      Swal.fire({
        icon: 'error',
        title: 'Failed',
        text: response.data.message || 'Failed to toggle offer status.',
      });
    }
  } catch (error) {
    console.error('Error toggling offer status:', error);

    // Error alert
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred. Please try again.',
    });
  }
}

    async function RemoveOffer(offerId) {
  try {
    // Show confirmation dialog
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: 'Do you really want to delete this offer? This action cannot be undone.',
      icon: 'warning',
      showCancelButton: true, // Add a cancel button
      confirmButtonColor: '#3085d6', // Color for confirm button
      cancelButtonColor: '#d33', // Color for cancel button
      confirmButtonText: 'Yes, delete it!', // Text for confirm button
      cancelButtonText: 'Cancel', // Text for cancel button
    });

    // If the user confirms
    if (result.isConfirmed) {
      const response = await axios.delete(`/admin/deleteOffer/${offerId}`);

      if (response.data.success) {
        // Show success alert and reload the page
        Swal.fire({
          icon: 'success',
          title: 'Deleted!',
          text: 'Offer has been deleted successfully.',
          timer: 3000,
        }).then(() => {
          window.location.reload();
        });
      } else {
        // Show error if success is false
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: response.data.message || 'Failed to delete the offer.',
        });
      }
    } else {
      // User cancelled the action
      Swal.fire({
        icon: 'info',
        title: 'Cancelled',
        text: 'Offer deletion was cancelled.',
        timer: 2000,
      });
    }
  } catch (error) {
    console.error('Error in removing offer:', error);

    // Show error alert for unexpected errors
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while deleting the offer. Please try again.',
    });
  }
}

 function changeData(offerId) {
  try{
    window.location.href = `/admin/editOffer/${offerId}`;
  
    }

  catch(error){
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error in rendering  the  edit offer. Please try again.',
    });
  }
}


  </script>
</body>
</html>
