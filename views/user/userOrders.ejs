<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        .break {
            background: #E4DCCF;
        }
        .break2 {
            background: #FFBE98;
        }
        .break3 {
            background: #FFF5E4;
        }
    </style>
</head>
<body class="break3">

    <!-- Header/Navbar Section -->
    <%- include('../partials/loggedheader') %>
    <%- include('../partials/navbar') %>

    <!-- Main Container -->
    <div class="flex">
        <%- include('../partials/modifiedUsidebar') %>
        <!-- Main Content Section -->
        <div class="flex-grow break3 px-20 py-10 border-4 border-black">
            <!-- Breadcrumbs -->
            <nav class="flex mb-4" aria-label="Breadcrumb">
                <ol class="inline-flex items-center space-x-1 md:space-x-3">
                    <li>
                        <div class="flex items-center">
                            <a href="/" class="text-gray-700 hover:text-purple-600">Home</a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <span class="text-gray-500">/</span>
                            <a href="/userProfile" class="ml-1 text-gray-700 hover:text-purple-600">User profile</a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <span class="text-gray-500">/</span>
                            <a href="/my-orders" class="ml-1 text-gray-700 hover:text-purple-600">My Orders</a>
                        </div>
                    </li>
                </ol>
            </nav>

            <div class="bg-white border-gray-900 shadow-lg p-4 mx-4">
                <h1 class="text-3xl font-bold mb-2 text-purple-600">My Orders</h1>

                <% if (orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                        <div class="bg-gray-50 border border-gray-200 rounded-lg mb-6 p-4">
                            <div class="flex justify-between mb-2">
                                <h2 class="text-2xl font-semibold">Order #<%= order.orderId %></h2>
                            </div>
                            <p class="text-gray-600 mb-2">Order Date: <strong><%= new Date(order.createdAt).toDateString() %></strong></p>
                            <p class="text-gray-600 mb-4">Total Amount: <strong>₹<%= order.totalAmount.toFixed(2) %></strong></p>
                            <p class="text-gray-600 mb-4">Coupon Discount: <strong>₹<%= (order.couponDiscount ? order.couponDiscount : 0).toFixed(2) %></strong></p>
                            <p class="text-gray-600 mb-4">Discount: <strong>₹<%= (Number(order.totalDiscount) || 0).toFixed(2) %></strong></p>
                        <!-- New Download Invoice button -->
                        <% if (order.
                        isPaid=== true > 0) { %>
                        <button 
                        class="download-invoice-btn inline-block mt-2 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
                        data-order-id="<%= order.orderId %>">
                        Download Invoice
                    </button>
                    <% } %>
                            <!-- Razorpay Failed Payment Message and Pay Again Button -->
                            <% if (order.paymentMethod === 'Razorpay' && order.isPaid === false) { %>
                                <div class="bg-red-100 text-red-700 p-2 rounded-lg mt-2">
                                    <p>Oops, payment failed!</p>
                                    <button onclick="retryPayment('<%= order.orderId %>')" class="mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                        Pay Again
                                    </button>
                                </div>
                            <% } %>
                            

                            <% order.items.forEach(item => { %>
                                <div class="border-t border-gray-300 py-4 flex flex-col md:flex-row items-start md:items-center">
                                    <img src="<%= item.productId.images[0] %>" alt="Product Image" class="w-full md:w-32 h-32 object-cover mb-4 md:mb-0">
                                    <div class="flex-1 md:ml-4">
                                        <h3 class="text-lg font-semibold mb-1"><%= item.productId.name %></h3>
                                        <p class="text-gray-600">Price: ₹<%= item.productId.finalPrice ? item.productId.finalPrice : item.productId.price %></p>
                                        <p class="text-gray-600">Quantity: <%= item.quantity %></p>
                                        <p class="text-gray-600">Subtotal: ₹<%= item.itemTotal.toFixed(2) %></p>
                                        <p class="text-gray-600">Item Status:
                                            <span class="<%= item.itemOrderStatus === 'Delivered' ? 'bg-green-100 text-green-600' : 'bg-yellow-100 text-yellow-600' %> py-1 px-3 rounded-full text-sm">
                                                <%= item.itemOrderStatus %>
                                            </span>
                                        </p>

                                   
                                    </div>

                                    <div class="mt-4 md:mt-0 md:ml-4 flex space-x-2">
                                        <!-- View Details button -->
                                        <a href="/user/orderDetails/<%= order.orderId %>" class="inline-block mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                                            View Details
                                        </a>
                                        <button class="bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600 transition" 
                                            onclick="showActionModal('<%= item.productId._id %>', '<%= order.orderId %>', '<%= item.itemOrderStatus %>')" 
                                            <%= item.itemOrderStatus === 'Cancelled'||item.itemOrderStatus === 'return requested'||item.itemOrderStatus === 'returned'||item.itemOrderStatus === 'return rejected' ? 'hidden' : '' %>>
                                            <%= item.itemOrderStatus === 'Delivered' ? 'Return Item' : 'Cancel Item' %>
                                        </button>
                                     
                                          
                                       
                                        
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% }) %>

                    <!-- Pagination -->
                    <div class="flex justify-center">
                        <a href="?page=<%= currentPage - 1 %>" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-l hover:bg-gray-400 <%= currentPage === 1 ? 'cursor-not-allowed' : '' %>" <%= currentPage === 1 ? 'disabled' : '' %>>Previous</a>
                        <span class="px-4 py-2 text-gray-800">Page <%= currentPage %> of <%= totalPages %></span>
                        <a href="?page=<%= currentPage + 1 %>" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-r hover:bg-gray-400 <%= currentPage === totalPages ? 'cursor-not-allowed' : '' %>"><%= currentPage === totalPages ? 'Next >' : 'Next' %></a>
                    </div>
                <% } else { %>
                    <p class="text-gray-600">No orders found.</p>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Modal Structure -->
    <div id="actionModal" class="fixed z-10 inset-0 hidden overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen px-4 text-center">
            <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
                <h3 class="text-lg font-semibold mb-4" id="modalTitle">Reason</h3>
                <textarea id="actionReason" class="w-full border border-gray-300 p-2 rounded mb-4" placeholder="Enter reason..."></textarea>
                <div class="flex justify-end space-x-4">
                    <button onclick="closeModal()" class="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400">Cancel</button>
                    <button id="confirmActionButton" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">Confirm</button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        let currentItemId;
        let currentOrderId;
        let currentAction;

        function showActionModal(itemId, orderId, itemStatus) {
            currentItemId = itemId;
            currentOrderId = orderId;
            currentAction = itemStatus === 'Delivered' ? 'return' : 'cancel';

            document.getElementById('modalTitle').innerText = `Reason for ${currentAction === 'return' ? 'Return' : 'Cancellation'}`;
            document.getElementById('actionModal').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('actionModal').classList.add('hidden');
            document.getElementById('actionReason').value = ''; // Clear reason on close
        }

        document.getElementById('confirmActionButton').onclick = function() {
            const reason = document.getElementById('actionReason').value;

            if (!reason) {
                alert(`Please provide a reason for ${currentAction}.`);
                return;
            }

            // AJAX request to cancel or return item
            fetch(`/user/${currentAction}Order`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId: currentItemId,
                    orderId: currentOrderId,
                    reason: reason
                })
            }).then(response => response.json()).then(data => {
                console.log('data',data)
                if (data.success) {
                    Swal.fire({
                        title: `${currentAction.charAt(0).toUpperCase() + currentAction.slice(1)} Successful`,
                        text: data.message,
                        icon: 'success',
                        confirmButtonText: 'Okay'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: `${currentAction.charAt(0).toUpperCase() + currentAction.slice(1)} Failed`,
                        text: data.message,
                        icon: 'error',
                        confirmButtonText: 'Okay'
                    });
                }
            }).catch(error => {
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'Okay'
                });
            }).finally(closeModal);
        };

        function retryPayment(orderId) {
    fetch('/user/retryPayment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId }),
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const options = {
                    key: "rzp_test_KDYrLJHnu3O9Ip", // Replace with your Razorpay Key
                    amount: data.razorpayOrder.amount,
                    currency: "INR",
                    order_id: data.razorpayOrder.id,
                    handler: function (response) {
                        verifyPayment(response, orderId);
                    },
                };
                const rzp = new Razorpay(options);
                rzp.open();
            } else {
                Swal.fire("Error", data.message, "error");
            }
        })
        .catch(error => console.error("Error retrying payment:", error));
}

function verifyPayment(response, orderId) {
    fetch('/verifyPayment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            paymentId: response.razorpay_payment_id,
            orderId: response.razorpay_order_id,
            signature: response.razorpay_signature,
            orderIds: orderId,
        }),
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire("Success", "Payment verified successfully!", "success").then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire("Error", "Payment verification failed.", "error");
            }
        })
        .catch(error => console.error("Error verifying payment:", error));
}


document.addEventListener("DOMContentLoaded", () => {
  const downloadButtons = document.querySelectorAll(".download-invoice-btn");

  downloadButtons.forEach((button) => {
    button.addEventListener("click", async () => {
      const orderId = button.getAttribute("data-order-id");

      try {
        const response = await axios.get(`/user/downloadInvoice/${orderId}`, {
          responseType: "blob", // Ensure the response is treated as a file
        });

        // Create a blob from the response
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement("a");
        link.href = url;

        // Set the filename
        link.setAttribute("download", `Invoice-${orderId}.pdf`);

        // Trigger the download
        document.body.appendChild(link);
        link.click();

        // Cleanup
        link.remove();
        window.URL.revokeObjectURL(url);
      } catch (error) {
        console.error("Error downloading invoice:", error);
        alert("Failed to download the invoice. Please try again.");
      }
    });
  });
});


    </script>

</body>
</html>
